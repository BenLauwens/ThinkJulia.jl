[[chap07]]
== Iteration

This chapter is about iteration, which is the ability to run a block of statements repeatedly. We saw a kind of iteration, using recursion, in <<recursion>>. We saw another kind, using a +for+ loop, in <<simple_repetition>>. In this chapter we’ll see yet another kind, using a +while+ statement. But first I want to say a little more about variable assignment.
(((iteration)))(((recursion)))(((for statement)))


=== Reassignment

As you may have discovered, it is legal to make more than one assignment to the same variable. A new assignment makes an existing variable refer to a new value (and stop referring to the old value).

[source,@julia-repl-test chap07]
----
julia> x = 5
5
julia> x = 7
7
----

The first time we display +x+, its value is 5; the second time, its value is 7.

[[fig07-1]]
.State diagram
image::images/fig71.svg[]

<<fig07-1>> shows what _reassignment_ looks like in a state diagram.
(((reassignment)))(((state diagram)))

At this point I want to address a common source of confusion. Because Julia uses the equal sign (+=+) for assignment, it is tempting to interpret a statement like +a = b+ as a mathematical proposition of equality; that is, the claim that +a+ and +b+ are equal. But this interpretation is wrong.
(((assignment statement)))

First, equality is a symmetric relationship and assignment is not. For example, in mathematics, if latexmath:[\(a=7\)] then latexmath:[\(7=a\)]. But in Julia, the statement +a = 7+ is legal and +7 = a+ is not.

Also, in mathematics, a proposition of equality is either true or false for all time. If latexmath:[\(a=b\)] now, then latexmath:[\(a\)] will always equal latexmath:[\(b\)]. In Julia, an assignment statement can make two variables equal, but they don’t have to stay that way:

[source,@julia-repl-test]
----
julia> a = 5
5
julia> b = a    # a and b are now equal
5
julia> a = 3    # a and b are no longer equal
3
julia> b
5
----

The third line changes the value of +a+ but does not change the value of +b+, so they are no longer equal.

[WARNING]
====
Reassigning variables is often useful, but you should use it with caution. If the values of variables change frequently, it can make the code difficult to read and debug.
====


=== Updating Variables

A common kind of reassignment is an update, where the new value of the variable depends on the old.
(((update)))

[source,@julia-repl-test chap07]
----
julia> x = x + 1
8
----

This means “get the current value of +x+, add one, and then update +x+ with the new value.”

If you try to update a variable that doesn’t exist, you get an error, because Julia evaluates the right side before it assigns a value to +x+:
(((UndefVarError)))

[source,@julia-repl-test]
----
julia> y = y + 1
ERROR: UndefVarError: y not defined
----

Before you can update a variable, you have to initialize it, usually with a simple assignment:
(((initialization)))

[source,@julia-repl-test]
----
julia> y = 0
0
julia> y = y + 1
1
----

Updating a variable by adding 1 is called an _increment_; subtracting 1 is called a _decrement_.
(((increment)))(((decrement)))


=== The +while+ Statement

Computers are often used to automate repetitive tasks. Repeating identical or similar tasks without making errors is something that computers do well and people do poorly. In a computer program, repetition is also called _iteration_.
(((iteration)))

We have already seen two functions, +countdown+ and +printn+, that iterate using recursion. Because iteration is so common, Julia provides language features to make it easier. One is the +for+ statement we saw in <<simple_repetition>>. We’ll get back to that later.
(((recursion)))(((for statement)))

Another is the +while+ _statement_. Here is a version of +countdown+ that uses a +while+ statement:
(((while)))((("keyword", "while", see="while")))(((while statement)))((("statement", "while", see="while statement")))

[source,@julia-setup]
----
function countdown(n)
    while n > 0
        print(n, " ")
        n = n - 1
    end
    println("Blastoff!")
end
----

You can almost read the +while+ statement as if it were English. It means, “While +n+ is greater than 0, display the value of +n+ and then decrement +n+. When you get to 0, display the word Blastoff!”
(((countdown)))

More formally, here is the flow of execution for a +while+ statement:
(((flow of execution)))

. Determine whether the condition is true or false.

. If false, exit the while statement and continue execution at the next statement.

. If the condition is true, run the body and then go back to step 1.

This type of flow is called a loop because the third step loops back around to the top.
(((loop)))

The body of the loop should change the value of one or more variables so that the condition becomes false eventually and the loop terminates. Otherwise the loop will repeat forever, which is called an _infinite loop_. An endless source of amusement for computer scientists is the observation that the directions on shampoo, “Lather, rinse, repeat”, are an infinite loop.
(((infinite loop)))

In the case of +countdown+, we can prove that the loop terminates: if +n+ is zero or negative, the loop never runs. Otherwise, +n+ gets smaller each time through the loop, so eventually we have to get to 0.

For some other loops, it is not so easy to tell. For example:
(((seq)))((("function", "programmer-defined", "seq", see="seq")))

[source,@julia-setup]
----
function seq(n)
    while n != 1
        println(n)
        if n % 2 == 0        # n is even
            n = n / 2
        else                 # n is odd
            n = n*3 + 1
        end
    end
end
----

The condition for this loop is +n != 1+, so the loop will continue until +n+ is 1, which makes the condition false.

Each time through the loop, the program outputs the value of +n+ and then checks whether it is even or odd. If it is even, +n+ is divided by 2. If it is odd, the value of +n+ is replaced with +pass:[n*3 + 1]+. For example, if the argument passed to sequence is 3, the resulting values of +n+ are 3, 10, 5, 16, 8, 4, 2, 1.

Since +n+ sometimes increases and sometimes decreases, there is no obvious proof that +n+ will ever reach 1, or that the program terminates. For some particular values of +n+, we can prove termination. For example, if the starting value is a power of two, +n+ will be even every time through the loop until it reaches 1. The previous example ends with such a sequence, starting with 16.

The hard question is whether we can prove that this program terminates for all positive values of +n+. So far, no one has been able to prove it or disprove it! (See https://en.wikipedia.org/wiki/Collatz_conjecture)
(((Collatz conjecture)))

===== Exercise 7-1

Rewrite the function +printn+ from <<recursion>> using iteration instead of recursion.


=== +break+

Sometimes you don’t know it’s time to end a loop until you get half way through the body. In that case you can use the _break statement_ to jump out of the loop.
(((break)))((("keyword", "break", see="break")))(((break statement)))((("statement", "break", see="break statement")))

For example, suppose you want to take input from the user until they type done. You could write:
(((readline)))

[source,julia]
----
while true
    print("> ")
    line = readline()
    if line == "done"
        break
    end
    println(line)
end
println("Done!")
----

The loop condition is +true+, which is always true, so the loop runs until it hits the break statement.

Each time through, it prompts the user with an angle bracket. If the user types +done+, the break statement exits the loop. Otherwise the program echoes whatever the user types and goes back to the top of the loop. Here’s a sample run:

[source]
----
> not done
not done
> done
Done!
----

This way of writing while loops is common because you can check the condition anywhere in the loop (not just at the top) and you can express the stop condition affirmatively (“stop when this happens”) rather than negatively (“keep going until that happens”).


=== +continue+

The break statement exits the loop. When a _continue statement_ is encountered inside a loop, control jumps to the beginning of the loop for the next iteration, skipping the execution of statements inside the body of the loop for the current iteration. For example:
(((continue)))((("keyword", "continue", see="continue")))(((continue statement)))((("statement", "continue", see="continue statement")))

[source,@julia]
----
for i in 1:10
    if i % 3 == 0
        continue
    end
    print(i, " ")
end
----

If +i+ is divisible by 3, the continue statement stops the current iteration and the next iteration starts. Only the numbers in the range 1 to 10 not divisible by 3 are printed.

[[square_roots]]
=== Square Roots

Loops are often used in programs that compute numerical results by starting with an approximate answer and iteratively improving it.

For example, one way of computing square roots is Newton’s method. Suppose that you want to know the square root of latexmath:[\(a\)]. If you start with almost any estimate, latexmath:[\(x\)], you can compute a better estimate with the following formula:
(((Newton's method)))

[latexmath]
++++
\begin{equation}
{y = \frac{1}{2}\left(x + \frac{a}{x}\right)}
\end{equation}
++++
For example, if latexmath:[\(a\)] is 4 and latexmath:[\(x\)] is 3:

[source,@julia-repl-test chap07]
----
julia> a = 4
4
julia> x = 3
3
julia> y = (x + a/x) / 2
2.1666666666666665
----

The result is closer to the correct answer (latexmath:[\(\sqrt 4 = 2\)]). If we repeat the process with the new estimate, it gets even closer:

[source,@julia-repl-test chap07]
----
julia> x = y
2.1666666666666665
julia> y = (x + a/x) / 2
2.0064102564102564
----

After a few more updates, the estimate is almost exact:

[source,@julia-repl-test chap07]
----
julia> x = y
2.0064102564102564
julia> y = (x + a/x) / 2
2.0000102400262145
julia> x = y
2.0000102400262145
julia> y = (x + a/x) / 2
2.0000000000262146
----

In general we don’t know ahead of time how many steps it takes to get to the right answer, but we know when we get there because the estimate stops changing:

[source,@julia-repl-test chap07]
----
julia> x = y
2.0000000000262146
julia> y = (x + a/x) / 2
2.0
julia> x = y
2.0
julia> y = (x + a/x) / 2
2.0
----

When +y == x+, we can stop. Here is a loop that starts with an initial estimate, +x+, and improves it until it stops changing:

[source,julia]
----
while true
    println(x)
    y = (x + a/x) / 2
    if y == x
        break
    end
    x = y
end
----

For most values of a this works fine, but in general it is dangerous to test float equality. Floating-point values are only approximately right: most rational numbers, like latexmath:[\(\frac{1}{3}\)], and irrational numbers, like latexmath:[\(\sqrt 2\)], can’t be represented exactly with a +Float64+.

Rather than checking whether +x+ and +y+ are exactly equal, it is safer to use the built-in function +abs+ to compute the absolute value, or magnitude, of the difference between them:
(((abs)))

[source,julia]
----
if abs(y-x) < ε
    break
end
----

Where +ε+ (+\varepsilon TAB+) has a value like +0.0000001+ that determines how close is close enough.


=== Algorithms

Newton’s method is an example of an _algorithm_: it is a mechanical process for solving a category of problems (in this case, computing square roots).
(((algorithm)))

To understand what an algorithm is, it might help to start with something that is not an algorithm. When you learned to multiply single-digit numbers, you probably memorized the multiplication table. In effect, you memorized 100 specific solutions. That kind of knowledge is not algorithmic.

But if you were “lazy”, you might have learned a few tricks. For example, to find the product of latexmath:[\(n\)] and 9, you can write latexmath:[\(n-1\)] as the first digit and latexmath:[\(10-n\)] as the second digit. This trick is a general solution for multiplying any single-digit number by 9. That’s an algorithm!

Similarly, the techniques you learned for addition with carrying, subtraction with borrowing, and long division are all algorithms. One of the characteristics of algorithms is that they do not require any intelligence to carry out. They are mechanical processes where each step follows from the last according to a simple set of rules.

Executing algorithms is boring, but designing them is interesting, intellectually challenging, and a central part of computer science.

Some of the things that people do naturally, without difficulty or conscious thought, are the hardest to express algorithmically. Understanding natural language is a good example. We all do it, but so far no one has been able to explain _how_ we do it, at least not in the form of an algorithm.


=== Debugging

As you start writing bigger programs, you might find yourself spending more time debugging. More code means more chances to make an error and more places for bugs to hide.
(((debugging)))

One way to cut your debugging time is “debugging by bisection”. For example, if there are 100 lines in your program and you check them one at a time, it would take 100 steps.
(((debugging by bisection)))

Instead, try to break the problem in half. Look at the middle of the program, or near it, for an intermediate value you can check. Add a print statement (or something else that has a verifiable effect) and run the program.
(((print statement)))

If the mid-point check is incorrect, there must be a problem in the first half of the program. If it is correct, the problem is in the second half.

Every time you perform a check like this, you halve the number of lines you have to search. After six steps (which is fewer than 100), you would be down to one or two lines of code, at least in theory.

In practice it is not always clear what the “middle of the program” is and not always possible to check it. It doesn’t make sense to count lines and find the exact midpoint. Instead, think about places in the program where there might be errors and places where it is easy to put a check. Then choose a spot where you think the chances are about the same that the bug is before or after the check.


=== Glossary

reassignment::
Assigning a new value to a variable that already exists.
(((reassignment)))

update::
An assignment where the new value of the variable depends on the old.
(((update)))

initialization::
An assignment that gives an initial value to a variable that will be updated.
(((initialization)))

increment::
An update that increases the value of a variable (often by one).
(((increment)))

decrement::
An update that decreases the value of a variable.
(((decrement)))

iteration::
Repeated execution of a set of statements using either a recursive function call or a loop.
(((iteration)))

while statement::
Statement that allows iterations controlled by a condition.
(((while statement)))

break statement::
Statement allowing to jump out of a loop.
(((break statement)))

continue statement::
Statement inside a loop that jumps to the beginning of the loop for the next iteration.
(((continue statement)))

infinite loop::
A loop in which the terminating condition is never satisfied.
(((infinite loop)))

algorithm::
A general process for solving a category of problems.
(((algorithm)))


=== Exercises

[[ex07-1]]
===== Exercise 7-2

Copy the loop from <<square_roots>> and encapsulate it in a function called +mysqrt+ that takes +a+ as a parameter, chooses a reasonable value of +x+, and returns an estimate of the square root of +a+.
(((mysqrt)))((("function", "programmer-defined", "mysqrt", see="mysqrt")))

To test it, write a function named +testsquareroot+ that prints a table like this:
(((testsquareroot)))((("function", "programmer-defined", "testsquareroot", see="testsquareroot")))

[source,@julia-eval]
----
using ThinkJulia
io = IOBuffer()
testsquareroot(io)
out = String(take!(io))
println(out)
----

The first column is a number, +a+; the second column is the square root of a computed with +mysqrt+; the third column is the square root computed by +sqrt+; the fourth column is the absolute value of the difference between the two estimates.

[[ex07-2]]
===== Exercise 7-3

The built-in function +Meta.parse+ takes a string and transforms it into an expression. This expression can be evaluated in Julia with the function +Core.eval+. For example:
(((parse)))((("function", "Meta", "parse", see="parse")))(((eval)))((("function", "Core", "eval", see="eval")))

[source,@julia-repl-test]
----
julia> expr = Meta.parse("1+2*3")
:(1 + 2 * 3)
julia> Core.eval(Main, expr)
7
julia> expr = Meta.parse("sqrt(π)")
:(sqrt(π))
julia> Core.eval(Main, expr)
1.7724538509055159
----

Write a function called +evalloop+ that iteratively prompts the user, takes the resulting input and evaluates it using +Core.eval+, and prints the result. It should continue until the user enters +done+, and then return the value of the last expression it evaluated.

(((evalloop)))((("function", "programmer-defined", "evalloop", see="evalloop")))

[[ex07-3]]
===== Exercise 7-4

The mathematician Srinivasa Ramanujan found an infinite series that can be used to generate a numerical approximation of latexmath:[\(\frac{1}{\pi}\)]:

[latexmath]
++++
\begin{equation}
{\frac{1}{\pi}=\frac{2\sqrt2}{9801}\sum_{k=0}^\infty\frac{(4k)!(1103+26390k)}{(k!)^4 396^{4k}}}
\end{equation}
++++

Write a function called +estimatepi+ that uses this formula to compute and return an estimate of π. It should use a while loop to compute terms of the summation until the last term is smaller than +1e-15+ (which is Julia notation for latexmath:[\(10^{-15}\)]). You can check the result by comparing it to +π+.
(((estimatepi)))((("function", "programmer-defined", "estimatepi", see="estimatepi")))
