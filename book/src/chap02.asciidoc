[[chap02]]
== Variables, Expressions and Statements

One of the most powerful features of a programming language is the ability to manipulate _variables_. A variable is a name that refers to a value.
(((variable)))(((value)))


=== Assignment Statements

An _assignment statement_ creates a new variable and gives it a value:
(((assignment statement)))((("statement", "assignment", see="assignment statement")))(((pass:[=], see="assignment statement")))(((pi)))((("π", see="pi")))

[source,@julia-repl-test chap02]
----
julia> message = "And now for something completely different"
"And now for something completely different"
julia> n = 17
17
julia> πval = 3.141592653589793
3.141592653589793
----

This example makes three assignments. The first assigns a string to a new variable named +message+; the second gives the integer +17+ to +n+; the third assigns the (approximate) value of latexmath:[\(\pi\)] to +πval+ (*+\pi TAB+*).

A common way to represent variables on paper is to write the name with an arrow pointing to its value. This kind of figure is called a _state diagram_ because it shows what state each of the variables is in (think of it as the variable’s state of mind). <<fig02-1>> shows the result of the previous example.
(((state diagram)))((("diagram", "state", see="state diagram")))

[[fig02-1]]
.State diagram
image::images/fig21.svg[]


=== Variable Names
(((variable)))

Programmers generally choose names for their variables that are meaningful—they document what the variable is used for.

Variable names can be as long as you like. They can contain almost all Unicode characters, but they can’t begin with a number. It is legal to use uppercase letters, but it is conventional to use only lower case for variable names.

Unicode characters can be entered via tab completion of LaTeX-like abbreviations in the Julia REPL.
(((Unicode character)))

The underscore character, +_+, can appear in a name. It is often used in names with multiple words, such as +your_name+ or +airspeed_of_unladen_swallow+.
(((underscore character)))(((LaTeX-like abbreviations)))

If you give a variable an illegal name, you get a syntax error:
(((syntax error)))((("error", "syntax", see="syntax error")))

[source,jlcon]
----
julia> 76trombones = "big parade"
ERROR: syntax: "76" is not a valid function argument name
julia> more@ = 1000000
ERROR: syntax: extra token "@" after end of expression
julia> struct = "Advanced Theoretical Zymurgy"
ERROR: syntax: unexpected "="
----

+76trombones+ is illegal because it begins with a number. +more@+ is illegal because it contains an illegal character, +@+. But what’s wrong with +struct+?

It turns out that +struct+ is one of Julia’s _keywords_. The REPL uses keywords to recognize the structure of the program, and they cannot be used as variable names.
(((keyword)))

Julia has these keywords:

----
abstract type    baremodule   begin      break       catch
const            continue     do         else        elseif      
end              export       finally    for         function
global           if           import     importall   in         
let              local        macro      module      mutable struct
primitive type   quote        return     try         using            
struct           where        while
----

You don’t have to memorize this list. In most development environments, keywords are displayed in a different color; if you try to use one as a variable name, you’ll know.


=== Expressions and Statements

An _expression_ is a combination of values, variables, and operators. A value all by itself is considered an expression, and so is a variable, so the following are all legal expressions:
(((expression)))

[source,@julia-repl-test chap02]
----
julia> 42
42
julia> n
17
julia> n + 25
42
----

When you type an expression at the prompt, the REPL _evaluates_ it, which means that it finds the value of the expression. In this example, +n+ has the value 17 and +n + 25+ has the value 42.
(((evaluate)))

A _statement_ is a unit of code that has an effect, like creating a variable or displaying a value.
(((statement)))

[source,@julia-repl-test chap02]
----
julia> n = 17
17
julia> println(n)
17
----

The first line is an assignment statement that gives a value to +n+. The second line is a print statement that displays the value of +n+.

When you type a statement, the REPL _executes_ it, which means that it does whatever the statement says. In general, statements don’t have values.
(((execute)))


=== Script Mode

So far we have run Julia in _interactive mode_, which means that you interact directly with the REPL. Interactive mode is a good way to get started, but if you are working with more than a few lines of code, it can be clumsy.
(((interactive mode)))

The alternative is to save code in a file called a _script_ and then run the REPL in _script mode_ to execute the script. By convention, Julia scripts have names that end with _.jl_.
(((script)))(((script mode)))

If you know how to create and run a script on your computer, you are ready to go. Otherwise I recommend using JuliaBox again. Open a text file, write the script and save with a _.jl_ extension. The script can be executed in a terminal with the command *+/opt/julia-1.0/bin/julia name_of_the_script.jl+*.
(((extension, .jl)))(((JuliaBox)))

Because Julia provides both modes, you can test bits of code in interactive mode before you put them in a script. But there are differences between interactive mode and script mode that can be confusing.

For example, if you are using Julia as a calculator, you might type

[source,@julia-repl-test]
----
julia> miles = 26.2
26.2
julia> miles * 1.61
42.182
----

The first line assigns a value to +miles+ and displays the value. The second line is an expression, so the REPL evaluates it and displays the result. It turns out that a marathon is about 42 kilometers.

But if you type the same code into a script and run it, you get no output at all. In script mode an expression, all by itself, has no visible effect. Julia actually evaluates the expression, but it doesn’t display the value unless you tell it to:

[source,julia]
----
miles = 26.2
println(miles * 1.61)
----

This behavior can be confusing at first.

A script usually contains a sequence of statements. If there is more than one statement, the results appear one at a time as the statements execute.

For example, the script

[source,julia]
----
println(1)
x = 2
println(x)
----

produces the output

[source,@julia-eval]
----
println(1)
x = 2
println(x)
----

The assignment statement produces no output.

===== Exercise 2-1

To check your understanding, type the following statements in the Julia REPL and see what they do:

[source,julia]
----
5
x = 5
x + 1
----

Now put the same statements in a script and run it. What is the output? Modify the script by transforming each expression into a print statement and then run it again.

=== Order of Operations

When an expression contains more than one operator, the order of evaluation depends on the _order of operations_. For mathematical operators, Julia follows mathematical convention. The acronym _PEMDAS_ is a useful way to remember the rules:
(((order of operations)))(((PEMDAS)))

* __P__arentheses have the highest precedence and can be used to force an expression to evaluate in the order you want. Since expressions in parentheses are evaluated first, +2*(3-1)+ is 4, and +pass:[(1+1)^(5-2)]+ is 8. You can also use parentheses to make an expression easier to read, as in +(minute * 100) / 60+, even if it doesn’t change the result.
(((parentheses)))

* __E__xponentiation has the next highest precedence, so +pass:[1+2^3]+ is 9, not 27, and +2*3^2+ is 18, not 36.
(((pass:[^])))

* __M__ultiplication and __D__ivision have higher precedence than __A__ddition and __S__ubtraction. So +2*3-1+ is 5, not 4, and +pass:[6+4/2]+ is 8, not 5.
(((pass:[*])))(((pass:[/])))(((pass:[+])))(((pass:[-])))

* Operators with the same precedence are evaluated from left to right (except exponentiation). So in the expression +degrees / 2 * π+, the division happens first and the result is multiplied by +π+. To divide by latexmath:[\(2\pi\)], you can use parentheses or write +degrees / 2 / π+.

[TIP]
====
I don’t work very hard to remember the precedence of operators. If I can’t tell by looking at the expression, I use parentheses to make it obvious.
====

=== String Operations

In general, you can’t perform mathematical operations on strings, even if the strings look like numbers, so the following are illegal:
(((string operation)))(((operator, string)))

[source,julia]
----
"2" - "1"    "eggs" / "easy"    "third" + "a charm"
----

But there are two exceptions, +*+ and +pass:[^]+.
(((pass:[*])))(((pass:[^])))

The +pass:[*]+ operator performs _string concatenation_, which means it joins the strings by linking them end-to-end. For example:
((("string", "concatenation", see="concatenate")))((("concatenate")))

[source,@julia-repl-test]
----
julia> first_str = "throat"
"throat"
julia> second_str = "warbler"
"warbler"
julia> first_str * second_str
"throatwarbler"
----

The +^+ operator also works on strings; it performs repetition. For example, +"Spam"pass:[^]3+ is +"SpamSpamSpam"+. If one of the values is a string, the other has to be an integer.
((("string", "repetition", see="repetition")))((("repetition")))

This use of +pass:[*]+ and +^+ makes sense by analogy with multiplication and exponentiation. Just as +4pass:[^]3+ is equivalent to +4*4*4+, we expect +"Spam"pass:[^]3+ to be the same as +pass:["Spam"*"Spam"*"Spam"]+, and it is.


=== Comments

As programs get bigger and more complicated, they get more difficult to read. Formal languages are dense, and it is often difficult to look at a piece of code and figure out what it is doing, or why.

For this reason, it is a good idea to add notes to your programs to explain in natural language what the program is doing. These notes are called _comments_, and they start with the +#+ symbol:
(((comment)))((("pass:[#]", see="comment")))

[source,julia]
----
# compute the percentage of the hour that has elapsed
percentage = (minute * 100) / 60
----

In this case, the comment appears on a line by itself. You can also put comments at the end of a line:

[source,julia]
----
percentage = (minute * 100) / 60   # percentage of an hour
----

Everything from the +#+ to the end of the line is ignored—it has no effect on the execution of the program.

Comments are most useful when they document non-obvious features of the code. It is reasonable to assume that the reader can figure out _what_ the code does; it is more useful to explain _why_.

This comment is redundant with the code and useless:

[source,julia]
----
v = 5   # assign 5 to v
----

This comment contains useful information that is not in the code:

[source,julia]
----
v = 5   # velocity in meters/second.
----

[WARNING]
====
Good variable names can reduce the need for comments, but long names can make complex expressions hard to read, so there is a tradeoff.
====


=== Debugging

Three kinds of errors can occur in a program: syntax errors, runtime errors, and semantic errors. It is useful to distinguish between them in order to track them down more quickly.
(((debugging)))

Syntax error:: 
“Syntax” refers to the structure of a program and the rules about that structure. For example, parentheses have to come in matching pairs, so +(1 + 2)+ is legal, but +8)+ is a syntax error.
+
If there is a syntax error anywhere in your program, Julia displays an error message and quits, and you will not be able to run the program. During the first few weeks of your programming career, you might spend a lot of time tracking down syntax errors. As you gain experience, you will make fewer errors and find them faster.
(((syntax error)))(((error message)))

Runtime error:: 
The second type of error is a runtime error, so called because the error does not appear until after the program has started running. These errors are also called _exceptions_ because they usually indicate that something exceptional (and bad) has happened.
+
Runtime errors are rare in the simple programs you will see in the first few chapters, so it might be a while before you encounter one.
(((runtime error)))((("error", "runtime", see="runtime error")))(((exception, see="runtime error")))

Semantic error:: 
The third type of error is “semantic”, which means related to meaning. If there is a semantic error in your program, it will run without generating error messages, but it will not do the right thing. It will do something else. Specifically, it will do what you told it to do.
+
Identifying semantic errors can be tricky because it requires you to work backward by looking at the output of the program and trying to figure out what it is doing.
(((semantic error)))((("error", "semantic", see="semantic error")))

=== Glossary

variable::
A name that refers to a value.
(((variable)))

assignment::
A statement that assigns a value to a variable
(((assignment)))

state diagram::
A graphical representation of a set of variables and the values they refer to.
(((state diagram)))

keyword::
A reserved word that is used to parse a program; you cannot use keywords like +if+, +function+, and +while+ as variable names.
(((keyword)))

operand::
One of the values on which an operator operates.
(((operand)))

expression::
A combination of variables, operators, and values that represents a single result.
(((expression)))

evaluate::
To simplify an expression by performing the operations in order to yield a single value.
(((evaluate)))

statement::
A section of code that represents a command or action. So far, the statements we have seen are assignments and print statements.
(((statement)))

execute::
To run a statement and do what it says.
(((execute)))

interactive mode::
A way of using the Julia REPL by typing code at the prompt.
(((interactive mode)))

script mode::
A way of using the Julia REPL to read code from a script and run it.
(((script mode)))

script::
A program stored in a file.
(((script)))

order of operations::
Rules governing the order in which expressions involving multiple operators and operands are evaluated.
(((order of operations)))

concatenate::
To join two operands end-to-end.
(((string concatenation)))

comment::
Information in a program that is meant for other programmers (or anyone reading the source code) and has no effect on the execution of the program.
(((comment)))

syntax error::
An error in a program that makes it impossible to parse (and therefore impossible to interpret).
(((syntax error)))

runtime error or exception::
An error that is detected while the program is running.
(((runtime error)))

semantics::
The meaning of a program.
(((semantics)))

semantic error::
An error in a program that makes it do something other than what the programmer intended.
(((semantic error)))


=== Exercises

[[ex02-1]]
===== Exercise 2-2

Repeating my advice from the previous chapter, whenever you learn a new feature, you should try it out in interactive mode and make errors on purpose to see what goes wrong.

. We’ve seen that +n = 42+ is legal. What about +42 = n+?

. How about +x = y = 1+?

. In some languages every statement ends with a semi-colon, +;+. What happens if you put a semi-colon at the end of a Julia statement?
(((pass:[;])))

. What if you put a period at the end of a statement?

. In math notation you can multiply +x+ and +y+ like this: +x y+. What happens if you try that in Julia?

[[ex02-2]]
===== Exercise 2-3

Practice using the Julia REPL as a calculator:
(((calculator)))

. The volume of a sphere with radius latexmath:[\(r\)] is latexmath:[\(\frac{4}{3} \pi r^3\)]. What is the volume of a sphere with radius 5?

. Suppose the cover price of a book is $ 24.95, but bookstores get a 40 % discount. Shipping costs $ 3 for the first copy and 75 cents for each additional copy. What is the total wholesale cost for 60 copies?

. If I leave my house at 6:52 am and run 1 mile at an easy pace (8:15 per mile), then 3 miles at tempo (7:12 per mile) and 1 mile at easy pace again, what time do I get home for breakfast?

